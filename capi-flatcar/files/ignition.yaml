locksmith:
  reboot_strategy: "off"
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - "{{ .Values.sshKeys.core }}"
storage:
  files:
    - path: /etc/crictl.yaml
      filesystem: root
      mode: 0600
      contents:
        inline: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
    - path: /etc/ssh/sshd_config
      filesystem: root
      mode: 0600
      contents:
        inline: |
          # Use most defaults for sshd configuration.
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM yes
          PrintLastLog no # handled by PAM
          PrintMotd no # handled by PAM
          PermitRootLogin no
          AllowUsers core
          AuthenticationMethods publickey
          TrustedUserCAKeys /etc/ssh/ca.pub
          AuthorizedPrincipalsFile /etc/ssh/auth_principals/%u
    - path: /etc/ssh/ca.pub
      filesystem: root
      mode: 0444
      contents:
        inline: |
          {{ .Values.sshKeys.caPub }}
    - path: /etc/ssh/auth_principals/core
      filesystem: root
      mode: 0444
      contents:
        inline: |
          delivery-infra
    - path: /etc/sysctl.d/90-override.conf
      filesystem: root
      mode: 0444
      contents:
        inline: net.ipv4.conf.lxc*.rp_filter = 0
    - path: /etc/sysctl.d/99-kubernetes-cri.conf
      filesystem: root
      mode: 0444
      contents:
        inline: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
    - path: /opt/bootstrap.sh
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          # This will configure k8s prereqs on a machine and install kubeadm, kubelet, kubectl, etc.

          # TODO: determine the right arch
          ARCH="amd64"
          BIN_DIR="/opt/bin"
          KUBE_VER="{{ .Values.kubeVersion }}"

          mkdir -p "$BIN_DIR"

          echo "Bootstrapping - $(date) ..."
          echo "$(uname -a)"
          echo "Kube version: $KUBE_VER"

          sysctl --system

          ## initialize container disk

          echo "$(lsblk -I 8 -o name,label,size)"

          # pick the smallest available disk
          CONTAINER_DISK=$(lsblk --json -I 8 -o name,label,size | jq -r '.blockdevices | sort_by(.size) | map(select(.children == null)) | map(select(.size != "0B")) | .[0].name')
          if [ ! -z "$CONTAINER_DISK" ]; then
            echo "Using container disk: /dev/${CONTAINER_DISK}"

            sgdisk --zap-all "/dev/${CONTAINER_DISK}"
            blkdiscard  "/dev/${CONTAINER_DISK}"
            mkfs.ext4 "/dev/${CONTAINER_DISK}"
            e2label "/dev/${CONTAINER_DISK}" CONTAINER_STORE

            systemctl stop containerd

            cat  <<EOF > /etc/systemd/system/var-lib-containerd.mount
            [Unit]
            Before=local-fs.target
            [Mount]
            What=LABEL=CONTAINER_STORE
            Where=/var/lib/containerd
            Type=ext4
            [Install]
            WantedBy=local-fs.target
          EOF

            cat  <<EOF > /etc/systemd/system/containerd.service.d/10-wait-var-lib-containerd.conf
            [Unit]
            After=var-lib-containerd.mount
            Requires=var-lib-containerd.mount
          EOF

            systemctl daemon-reload
            systemctl enable --now var-lib-containerd.mount
            mkdir /var/lib/containerd/pod-logs && ln -s /var/log/pods /var/lib/containerd/pod-logs
            systemctl start containerd
          else
            echo "WARNING: unable to pick an available container disk using lsblk!"
          fi

          ## install kubeadm, kubelet, kubectl and add a kubelet systemd service

          cd $BIN_DIR
          curl -L --remote-name-all https://dl.k8s.io/release/${KUBE_VER}/bin/linux/${ARCH}/{kubeadm,kubelet,kubectl}
          chmod +x {kubeadm,kubelet,kubectl}

          systemctl enable --now kubelet

          mkdir /etc/containerd
          containerd config default > /etc/containerd/config.toml
          sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
          sed -i "s,sandbox_image.*$,sandbox_image = \"$(/opt/bin/kubeadm config images list | grep pause | sort -r | head -n1)\"," /etc/containerd/config.toml

          systemctl restart containerd

systemd:
  units:
    - name: kubeadm.service
      enabled: true
      dropins:
        - name: 10-flatcar.conf
          contents: |
            [Unit]
            # kubeadm must run after coreos-metadata populated /run/metadata directory.
            Requires=coreos-metadata.service
            After=coreos-metadata.service
            # kubeadm must run after containerd - see https://github.com/kubernetes-sigs/image-builder/issues/939.
            After=containerd.service
            [Service]
            # To make metadata environment variables available for pre-kubeadm commands.
            EnvironmentFile=/run/metadata/*
    - name: kubelet.service
      enabled: false
      contents: |
        [Unit]
        Description=kubelet: The Kubernetes Node Agent
        Documentation=https://kubernetes.io/docs/home/
        Wants=network-online.target
        After=network-online.target
        [Service]
        ExecStart=/opt/bin/kubelet
        Restart=always
        StartLimitInterval=0
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
      dropins:
        - name: 10-kubeadm.conf
          contents: |
            # Note: This dropin only works with kubeadm and kubelet v1.11+
            [Service]
            Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
            Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
            # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
            EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
            # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
            # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
            EnvironmentFile=-/etc/default/kubelet
            ExecStart=
            ExecStart=/opt/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
    - name: systemd-networkd.service
      enabled: true
    - name: systemd-networkd-wait-online.service
      enabled: true
    - name: docker.socket
      enabled: false
      mask: true
    - name: docker.service
      enabled: false
      mask: true
    - name: containerd.service
      enabled: true
      dropins:
        - name: 10-use-custom-config.conf
          contents: |
            [Service]
            ExecStart=
            ExecStart=/usr/bin/containerd
    # TPM is disabled in the BIOS
    - name: tcsd.service
      enabled: false
      mask: true
    # Use NTP not systemd-timesyncd
    - name: systemd-timesyncd.service
      mask: true
    - name: ntpd.service
      enable: true
    - name: enable-selinux.service
      enabled: false
      contents: |
        [Unit]
        Description=Set SELinux to enforcing
        DefaultDependencies=no
        After=local-fs.target systemd-tmpfiles-setup.service
        Conflicts=shutdown.target
        Before=sysinit.target shutdown.target
        ConditionSecurity=selinux
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/sbin/setenforce 1
        [Install]
        WantedBy=multi-user.target
