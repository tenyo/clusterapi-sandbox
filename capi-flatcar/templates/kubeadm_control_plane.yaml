apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: {{ include "capi-flatcar.name" . }}-controller
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          cloud-provider: external
          allocate-node-cidrs: 'true'
          flex-volume-plugin-dir: "/opt/libexec/kubernetes/kubelet-plugins/volume/exec/"
          profiling: 'false'
    initConfiguration:
      nodeRegistration:
        name: ${COREOS_PACKET_HOSTNAME}
        kubeletExtraArgs:
          cloud-provider: external
          container-log-max-size: 1M
          volume-plugin-dir: "/opt/libexec/kubernetes/kubelet-plugins/volume/exec/"
        # remove taints to make sure we can deploy on controllers
        taints: []
    joinConfiguration:
      nodeRegistration:
        name: ${COREOS_PACKET_HOSTNAME}
        ignorePreflightErrors:
          - DirAvailable--etc-kubernetes-manifests
        kubeletExtraArgs:
          cloud-provider: external
        # remove taints to make sure we can deploy on controllers
        taints: []
    format: ignition
    ignition:
      containerLinuxConfig:
        additionalConfig: |
{{ tpl (.Files.Get "files/ignition.yaml") . | indent 10 }}
    preKubeadmCommands:
      - |
        envsubst < /etc/kubeadm.yml > /etc/kubeadm.yml.tmp && mv /etc/kubeadm.yml.tmp /etc/kubeadm.yml
        /opt/bootstrap.sh > /opt/bootstrap.log
        export PATH=$PATH:/opt/bin
        export CP_ENDPOINT=$(grep controlPlaneEndpoint /etc/kubeadm.yml | cut -d ':' -f2 | xargs)
        if [ -z "$CP_ENDPOINT" ]; then
          # when joining an existing cluster
          export CP_ENDPOINT=$(grep apiServerEndpoint /etc/kubeadm.yml | cut -d ':' -f2 | xargs)
        fi
        ping -c 3 -q ${CP_ENDPOINT} && echo OK || ip addr add ${CP_ENDPOINT} dev lo
    postKubeadmCommands:
      - |
        mkdir -p /root/.kube && cp /etc/kubernetes/admin.conf /root/.kube/config
        curl -o /run/metadata.json -fsSL https://metadata.platformequinix.com/metadata

        # deploy kube-vip
        KVVERSION="{{ .Values.versions.kubeVip }}"
        ctr image pull ghcr.io/kube-vip/kube-vip:${KVVERSION}
        ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:$KVVERSION vip /kube-vip manifest pod \
          --interface "lo" \
          --vip "${CP_ENDPOINT}" \
          --controlplane \
          --bgp \
          --peerAS $(cat /run/metadata.json | jq -r '.bgp_neighbors[0].peer_as') \
          --peerAddress $(cat /run/metadata.json | jq -r '.bgp_neighbors[0].peer_ips[0]') \
          --localAS $(cat /run/metadata.json | jq -r '.bgp_neighbors[0].customer_as') \
          --bgpRouterID $(cat /run/metadata.json | jq -r '.bgp_neighbors[0].customer_ip') > /etc/kubernetes/manifests/kube-vip.yaml

        # add kube vip on lo
        cat <<EOF >> /etc/systemd/network/00-lo-kubeanycast.network
        [Match]
        Name=lo
        [Network]
        [Address]
        Label=lo:kubeapi
        Address=${CP_ENDPOINT}/32
        EOF

        # add routes to bgp peers
        BGP_GW=$(cat /run/metadata.json | jq -r '.network.addresses[] | select(.public == false and .address_family == 4) | .gateway')
        for BGP_PEER in $(cat /run/metadata.json | jq -r '.bgp_neighbors[0].peer_ips[]'); do
          cat <<EOF >> /etc/systemd/network/05-bond0.network
        [Route]
        Gateway=${BGP_GW}
        Destination=${BGP_PEER}
        EOF
        done

        export KUBECONFIG=/etc/kubernetes/admin.conf

        # deploy the EM cloud provider
        CPEM_DS=$(kubectl get ds -n kube-system | grep -c cloud-provider-equinix-metal || true)
        if [ ${CPEM_DS} -eq 0 ]; then
          export CPEM_YAML="https://github.com/equinix/cloud-provider-equinix-metal/releases/download/{{ .Values.versions.cpem }}/deployment.yaml"
          export SECRET_DATA='cloud-sa.json=''{"apiKey": "{{ .Values.apiKey }}","projectID": "{{ .Values.equinixmetal.projectID }}", "eipTag": "cluster-api-provider-packet:cluster-id:{{ include "capi-flatcar.name" . }}", "eipHealthCheckUseHostIP": true}'''
          kubectl create secret generic -n kube-system metal-cloud-config --from-literal="${SECRET_DATA}" || (sleep 1 && kubectl create secret generic -n kube-system metal-cloud-config --from-literal="${SECRET_DATA}") || (sleep 1 && kubectl create secret generic -n kube-system metal-cloud-config --from-literal="${SECRET_DATA}")
          kubectl apply -f ${CPEM_YAML} || (sleep 1 && kubectl apply -f ${CPEM_YAML}) || (sleep 1 && kubectl apply -f ${CPEM_YAML})
        fi

        systemctl restart systemd-networkd.service
        rm /run/metadata.json

        CCNP_YAML="/opt/default-ccnp.yaml"
        if [ -f ${CCNP_YAML} ]; then
          # apply a default ccnp after cilium is installed
          for i in $(seq 1 3); do
            kubectl get crds ciliumclusterwidenetworkpolicies.cilium.io \
              && kubectl apply -f ${CCNP_YAML} \
              && break \
            || sleep 30
          done
        fi

  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: PacketMachineTemplate
      name: {{ include "capi-flatcar.name" . }}-controller
  replicas: {{ .Values.controlplane.count }}
  version: {{ .Values.kubeVersion }}
